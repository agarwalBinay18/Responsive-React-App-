{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","Error.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","CardComponent","map","user","i","key","SearchBox","Searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Error","state","hasError","error","info","this","setState","Component","App","onSeachChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAYeA,EAXJ,SAACC,GACX,OACM,yBAAKC,UAAU,mDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,MACrD,6BACG,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCOPC,EAXA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACVC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE/E,OACC,6BAEAG,ICEaK,G,KATC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC/B,OACA,yBAAKf,UAAU,UACb,2BAAOA,UAAU,sCAAsCgB,KAAK,SAASC,YAAY,SACjFC,SAAUH,OCEGI,EAPF,SAACpB,GACb,OACA,yBAAKqB,MAAO,CAACC,UAAU,OAAQC,OAAO,kBAAmBC,OAAO,UAC/DxB,EAAMyB,WCgBOC,G,kBAlBd,WAAY1B,GAAO,IAAD,8BAClB,4CAAMA,KACD2B,MAAM,CACVC,UAAU,GAHO,E,+EAOAC,EAAQC,GACzBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACN,yDAEDG,KAAK/B,MAAMyB,a,GAfDQ,cC6CLC,E,YAtCd,aAAe,IAAD,8BACd,+CASDC,cAAc,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SATxC,EAAKZ,MAAM,CACXnB,OAAQ,GACR6B,YAAa,IAJC,E,iFAOK,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACxB,OAAOoC,S,+BAOtH,IAAD,OACOC,EAAiBd,KAAKJ,MAAMnB,OAAOsC,QAAO,SAAAtC,GAC/C,OAAOA,EAAOH,KAAK0C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBAE/D,OAAgC,IAA7BhB,KAAKJ,MAAMnB,OAAOyC,OAChB,uCAIL,yBAAKhD,UAAU,MACf,2CACA,kBAAC,EAAD,CAAWe,aAAce,KAAKI,gBAC9B,kBAAC,EAAD,CAAQ/B,GAAG,UACR,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUI,OAAQqC,W,GA9BTZ,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,EAAD,MACEC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.6f9b860e.chunk.js","sourcesContent":["import React from 'react';\r\nconst Card=(props)=>{\r\n\treturn(\r\n       <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n         <img alt=\"robots\" src={`https://robohash.org/${props.id}`} />\r\n         <div>\r\n            <h2>{props.name}</h2>\r\n            <p>{props.email}</p>\r\n         </div>\r\n       </div>\r\n\t)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n//import {robots} from './robots';\r\nconst CardList=({robots})=>{\r\n\tconst CardComponent = robots.map((user, i)=>{\r\n\t\treturn(<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />)\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\r\n\t{CardComponent}\r\n\t</div>\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst SearchBox=({Searchfield, searchChange})=>{\r\nreturn(\r\n<div className='pa3 tc'>\r\n  <input className='tc pa3 ba b--green bg-lightest-blue' type='search' placeholder='search'\r\n  onChange={searchChange}\r\n  ></input>\r\n</div>\r\n);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t<div style={{overflowY:'auto', border:'1px solid black', height:'500px'}}>\r\n\t{props.children}\r\n\t</div>\r\n\t)\r\n};\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass Error extends Component{\r\n\tconstructor(props){\r\n\tsuper(props)\r\n\tthis.state={\r\n\t\thasError: false\r\n\t}\r\n}\r\n\r\n componentDidCatch(error , info){\r\n \tthis.setState({hasError: true})\r\n }\r\nrender(){\r\n   if(this.state.hasError){\r\n   \treturn <h1>Ooooops. That is not good</h1>\r\n   }\r\n   return this.props.children\r\n}\r\n\r\n}\r\nexport default Error; ","import React, {Component} from 'react';\nimport CardList from './CardList';\n//import {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport 'tachyons';\nimport './App.css';\nimport Error from './Error';\nclass App extends Component{\n\tconstructor() {\n\tsuper()\n\tthis.state={\n\trobots: [],\n\tsearchfield: ''\n}\n}\ncomponentDidMount(){\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({robots:users}))\n}\nonSeachChange=(event)=>{\n\tthis.setState({searchfield:event.target.value})\n}\n\nrender()\n{\n\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t})\n    if(this.state.robots.length === 0){\n\t\treturn(<h1>Loading</h1>)\n\t}\n\telse{\n  return (\n    <div className=\"tc\">\n    <h1>RoboFriends</h1>    \n    <SearchBox searchChange={this.onSeachChange}/>\n    <Scroll id=\"Scroll\">\n       <Error>\n       \t\t<CardList robots={filteredRobots}/>\n       </Error>\n    </Scroll>\n    </div>\n  );\n}\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n\t<App/>\n\t, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}